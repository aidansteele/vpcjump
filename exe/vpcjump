#!/usr/bin/env ruby
require 'uri'
require 'json'
require 'clamp'
require 'aws-sdk'
require 'logger'

module VpcJump
  class CLI < Clamp::Command
    option '--instance-id', 'INSTANCE ID', 'EC2 instance id of jump box (e.g. i-abc123)'
    option '--name', 'INSTANCE NAME', 'EC2 instance name of jump box'
    option '--ngrok-token', 'NGROK TOKEN', 'ngrok auth token'
    option '--ngrok-region', 'NGROK REGION', 'ngrok region', default: 'us'
    option ['-v', '--verbose'], :flag, 'Output AWS API calls'

    subcommand 'kill', 'Terminate ngrok tunnel' do
      def execute
        Aws.config[:logger] = Logger.new($stdout) if verbose?

        id = instance_id
        ssm_exec id, 'killall ngrok'
      end
    end

    subcommand 'ssh', 'SSH into the jumpbox' do
      option '--ssh-user', 'SSH USER', 'SSH user', default: 'ec2-user'
      parameter '[SSHPARAMS] ...', 'Arguments to pass to SSH'

      def default_sshparams_list
        []
      end

      def execute
        Aws.config[:logger] = Logger.new($stdout) if verbose?

        id = instance_id

        ssm_exec id, "ngrok tcp --log stdout --region #{ngrok_region} --authtoken #{ngrok_token} 22"
        sleep 20

        tunnels = []

        loop do
          resp = ssm_exec id, 'curl -s http://localhost:4040/api/tunnels'
          output = ssm_output resp.command_id
          json = JSON.parse output
          tunnels = json['tunnels']
          break if tunnels.length > 0
        end

        url = tunnels[0]['public_url']
        uri = URI.parse url
        port = uri.port
        host = uri.hostname

        cmd = "ssh -p #{port} #{sshparams_list.join(' ')} #{ssh_user}@#{host}"
        puts cmd if verbose?
        exec cmd
      end
    end

    def ssm_exec(instance_id, command)
      ssm = Aws::SSM::Client.new

      resp = ssm.send_command(
          instance_ids: [instance_id],
          document_name: 'AWS-RunShellScript',
          parameters: {
              commands: [command]
          }
      )

      resp.command
    end

    def ssm_output(command_id)
      ssm = Aws::SSM::Client.new

      loop do
        sleep 1
        response = ssm.list_command_invocations command_id: command_id, details: true
        invocation = response.command_invocations.first

        if ['Pending', 'InProgress'].include?(invocation.status)
          next
        end

        escaped = invocation.command_plugins[0].output
        return escaped.gsub('&quot;', '"')
      end
    end
  end
end

VpcJump::CLI.run
